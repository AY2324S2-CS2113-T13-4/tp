@startuml
skinparam classAttributeIconSize 0
skinparam CircledCharacterFontSize 0
skinparam CircledCharacterRadius 0

abstract class Command
class Inventory
class Item
class ListCommand
class Parser
class Ui

Command <|. ListCommand
Item <... ListCommand
Ui <.. ListCommand
Inventory <.. ListCommand
ListCommand <.. Parser

interface Command <<interface>> {
    +execute():void
    +isQuit():boolean
}

class ListCommand {
    -firstParam:String
    -secondParam:String
    -thirdParam:String
    -firstSortParam:String
    -secondSortParam:String
    -thirdSortParam:String
    -isReverse:boolean
    -sortBy(sortParam:String, items:List<Item>)
    +ListCommand()
    +execute():void
    +isQuit():boolean
}

class Item {
    {static}+sortByName():Comparator<Item>
    {static}+sortByQuantity():Comparator<Item>
    {static}+sortByPrice():Comparator<Item>
    {static}+sortByDate():Comparator<Item>
}

class Inventory {
    {static}+getItems():ArrayList<Item>
}

class Ui {
    {static}+listIntro(size:int):void
    {static}+listItem():void
}

class Parser {
    {static}-parseListCommand(input:String):Command
}

note "Some parameters and methods \nomitted for brevity" as n1

@enduml

@startuml
hide footbox
participant "SuperTracker" as SuperTracker <<class>> #f5e3a9
participant ":ListCommand" as ListCommand #cbf7f4
participant "Inventory" as Inventory <<class>> #d5eac2
participant "Collections" as Collections <<class>> #ffcdd6
participant "Ui" as Ui <<class>> #e5c2ea

SuperTracker -> ListCommand : execute()
activate ListCommand #cbf7f4

ListCommand -> Inventory : getItems()
activate Inventory #d5eac2

Inventory --> ListCommand : items:ArrayList<Item>
deactivate Inventory

ListCommand -> Ui : listIntro(size:int)
activate Ui #e5c2ea
Ui --> ListCommand
deactivate Ui

ListCommand -> ListCommand : sortBy(ALPHABET:String, items:ArrayList<Item>)
activate ListCommand #cbf7f4
ListCommand --> ListCommand
note right : items sorted according to alphabet
deactivate ListCommand

ListCommand -> ListCommand : sortBy(thirdSortParam:String, items:ArrayList<Item>)
activate ListCommand #cbf7f4
ListCommand --> ListCommand
note right : items sorted according to thirdSortParam
deactivate ListCommand

ListCommand -> ListCommand : sortBy(secondSortParam:String, items:ArrayList<Item>)
activate ListCommand #cbf7f4
ListCommand --> ListCommand
note right : items sorted according to secondSortParam
deactivate ListCommand

ListCommand -> ListCommand : sortBy(firstSortParam:String, items:ArrayList<Item>)
activate ListCommand #cbf7f4
ListCommand --> ListCommand
note right : items sorted according to firstSortParam
deactivate ListCommand

opt isReverse

ListCommand -> Collections : reverse(items:ArrayList<Item>)
activate Collections #ffcdd6
Collections --> ListCommand
deactivate Collections

end

loop items

ListCommand -> Ui : listItem(item:Item, index:int, firstParam:String, secondParam:String, thirdParam:String)
activate Ui #e5c2ea
Ui --> ListCommand
deactivate Ui

end

ListCommand --> SuperTracker
deactivate ListCommand
@enduml